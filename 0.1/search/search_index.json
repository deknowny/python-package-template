{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PYPATE (Python Package Template) My python library template repo with useful tools for developing. Made with cookiecutter Handbook : https://deknowny.github.io/python-package-template/latest/ Features GitHub Actions workflows for CI and CD (tests and PyPI deploy for new tags) Build docs site for GitHub Pages with every push Coveralls coverage report Used poetry as package manager, pytest for unit tests Makefile with a lot of useful scripts shortcuts Pre-commit configured black and isort configured Extended .gitignore .editoconfig configured mypy configured bumpversion configured autoflake configured Mkdocs with Material theme docs builder, mike for version control Projects use this template Soon","title":"Home"},{"location":"#pypate-python-package-template","text":"My python library template repo with useful tools for developing. Made with cookiecutter Handbook : https://deknowny.github.io/python-package-template/latest/","title":"PYPATE (Python Package Template)"},{"location":"#features","text":"GitHub Actions workflows for CI and CD (tests and PyPI deploy for new tags) Build docs site for GitHub Pages with every push Coveralls coverage report Used poetry as package manager, pytest for unit tests Makefile with a lot of useful scripts shortcuts Pre-commit configured black and isort configured Extended .gitignore .editoconfig configured mypy configured bumpversion configured autoflake configured Mkdocs with Material theme docs builder, mike for version control","title":"Features"},{"location":"#projects-use-this-template","text":"Soon","title":"Projects use this template"},{"location":"reference/","text":"This guide is out of sumsub library guide and should cover all questions about developing. Sections are placed not in an order","title":"Introduction"},{"location":"reference/manage-dependencies/","text":"Poetry's dependencies divide into 2 groups and both of them can be optional or required : Development Production Production dependencies are installed when your library is installed by a user (usually package is installed from PyPI) Development dependencies are installed when your library is installed by a contributor with purpose of adding new feature to your library (always package is installed from source, i.e from GitHub) All dependencies' information is stored in pyproject.toml file. The dependencies' source code is in the .venv folder How does optional dependencies work? All optional dependencies divide into groups by a developer For example, some dependencies are required to build documentation. You can view dev-docs group of dependencies in pyproject.toml . If you need to install only them as optional you can execute this Terminal pip install library [ dev-docs ] Separate by a comma optional dependencies in brackets ( [] ) Anyway, you do not need to install any development dependencies when you install a package from PyPI as a user. It's for an example Any group from dev dependencies could be also installed with make out of library source Terminal make install-dev-docs Why the template does not use dev-dependencies section? Because now Poetry does not support dev-dependencies with extras. The template have many development dependencies and full installation of them takes quite long time so division is required Check out this: The reason why extras not support with dev-dependencies Awaiting of extra dev-dependencies troubleshooting Install the project from source in development mode make install-dev-all will install all development dependencies. If you need only a part of them, check out the Makefile and find a command for your purpose Install the project from source in production mode make install-production will install only required dependencies and the library should be ready for usage Feature You can add the library code as dependency as Git Submodule Add a non-optional dependency For example, you want to add a requests as dependency for project, so it should be installed when your library is installed Terminal poetry add requests Now when someone installs your library, requests will be installed too Add an optional dependency For example, you want to optimize JSON parsing in your project with orjson library (as it is written on Rust and requires rustc ). You can do not force user install orjson and keep orjson as optional Terminal poetry add orjson --optional As it's an optional, you should add it to a special group of optional dependencies. Your pyproject.toml looks like this pyproject.toml ... [tool.poetry.dependencies] orjson = { optional = true , version = \"^3.6.5\" } ... And now add the dependency to a new group. Let's call it fast-json pyproject.toml [tool.poetry.extras] # Ordinary extra dependencies all = [] # Fast and optimized JSON parsers fast-json = [ \"orjson\" ] ... It's a good practice to unite all your optional dependencies into a all group so add it there too pyproject.toml [tool.poetry.extras] # Ordinary extra dependencies all = [ \"orjson\" ] # Fast and optimized JSON parsers fast-json = [ \"orjson\" ] ... Add a non-optional dev dependency Terminal poetry add pytest --dev pytest will be installed every time your library is installed in development mode Add an optional dev dependency Terminal poetry add pytest-asyncio --optional It looks like optional production dependency, but now we should change extra section in another way. All optional development dependencies groups marked with prefix dev- . So our pytest-asyncio should be addd in such groups. Check out pyproject.toml . There is an existed group of optional dependencies used for testing (as pytest-asyncio too) pyproject.toml [tool.poetry.extra] ... dev-test = [ \"pytest\" , \"pytest-cov\" , \"coveralls\" , \"coverage\" ] Now put it here pyproject.toml [tool.poetry.extra] ... dev-test = [ \"pytest-asyncio\" , \"pytest\" , \"pytest-cov\" , \"coveralls\" , \"coverage\" ] And there is also a dev-all group that need to be modified pyproject.toml [tool.poetry.extra] ... dev-test = [ \"pytest-asyncio\" , \"pytest\" , \"pytest-cov\" , \"coveralls\" , \"coverage\" ] ... dev-all = [ \"black\" , \"isort\" , \"pre-commit\" , \"pytest\" , \"pytest-cov\" , \"pytest-asyncio\" \"coveralls\" , \"coverage\" , \"mypy\" , \"bumpversion\" , \"autoflake\" , \"mkdocs\" , \"mkdocs-material\" , \"mike\" ]","title":"Manage dependencies"},{"location":"reference/manage-dependencies/#install-the-project-from-source-in-development-mode","text":"make install-dev-all will install all development dependencies. If you need only a part of them, check out the Makefile and find a command for your purpose","title":"Install the project from source in development mode"},{"location":"reference/manage-dependencies/#install-the-project-from-source-in-production-mode","text":"make install-production will install only required dependencies and the library should be ready for usage Feature You can add the library code as dependency as Git Submodule","title":"Install the project from source in production mode"},{"location":"reference/manage-dependencies/#add-a-non-optional-dependency","text":"For example, you want to add a requests as dependency for project, so it should be installed when your library is installed Terminal poetry add requests Now when someone installs your library, requests will be installed too","title":"Add a non-optional dependency"},{"location":"reference/manage-dependencies/#add-an-optional-dependency","text":"For example, you want to optimize JSON parsing in your project with orjson library (as it is written on Rust and requires rustc ). You can do not force user install orjson and keep orjson as optional Terminal poetry add orjson --optional As it's an optional, you should add it to a special group of optional dependencies. Your pyproject.toml looks like this pyproject.toml ... [tool.poetry.dependencies] orjson = { optional = true , version = \"^3.6.5\" } ... And now add the dependency to a new group. Let's call it fast-json pyproject.toml [tool.poetry.extras] # Ordinary extra dependencies all = [] # Fast and optimized JSON parsers fast-json = [ \"orjson\" ] ... It's a good practice to unite all your optional dependencies into a all group so add it there too pyproject.toml [tool.poetry.extras] # Ordinary extra dependencies all = [ \"orjson\" ] # Fast and optimized JSON parsers fast-json = [ \"orjson\" ] ...","title":"Add an optional dependency"},{"location":"reference/manage-dependencies/#add-a-non-optional-dev-dependency","text":"Terminal poetry add pytest --dev pytest will be installed every time your library is installed in development mode","title":"Add a non-optional dev dependency"},{"location":"reference/manage-dependencies/#add-an-optional-dev-dependency","text":"Terminal poetry add pytest-asyncio --optional It looks like optional production dependency, but now we should change extra section in another way. All optional development dependencies groups marked with prefix dev- . So our pytest-asyncio should be addd in such groups. Check out pyproject.toml . There is an existed group of optional dependencies used for testing (as pytest-asyncio too) pyproject.toml [tool.poetry.extra] ... dev-test = [ \"pytest\" , \"pytest-cov\" , \"coveralls\" , \"coverage\" ] Now put it here pyproject.toml [tool.poetry.extra] ... dev-test = [ \"pytest-asyncio\" , \"pytest\" , \"pytest-cov\" , \"coveralls\" , \"coverage\" ] And there is also a dev-all group that need to be modified pyproject.toml [tool.poetry.extra] ... dev-test = [ \"pytest-asyncio\" , \"pytest\" , \"pytest-cov\" , \"coveralls\" , \"coverage\" ] ... dev-all = [ \"black\" , \"isort\" , \"pre-commit\" , \"pytest\" , \"pytest-cov\" , \"pytest-asyncio\" \"coveralls\" , \"coverage\" , \"mypy\" , \"bumpversion\" , \"autoflake\" , \"mkdocs\" , \"mkdocs-material\" , \"mike\" ]","title":"Add an optional dev dependency"},{"location":"reference/vendor/","text":"Sometimes it is necessary to have a dependency with its source by a hand. Maybe you develop it or just fix some bugs or want to add new feature, anyway you need that its source code dto be placed with your source 1) Folder for your dependencies It cannot be placed in .venv anymore. All dependencies' source code usually place in vendor folder, so, firstly, you need to create it 2) Add git submodule Terminal git add submodule { repository url } vendor/ { repo name } Submodule is correctly handled by Git when you do commit. It is recognized as another repository, not just an ordinary folder. It is still a Git repository that can be pulled, for example. Hint Recommend you add such dependencies from your own fork of the original repository 3) Add it with poetry Terminal poetry add vendor/ { name } or another way as described in how to add a dependency And you see something like this pyproject.toml [tool.poetry.dependencies] my-package = { path = \"../my/path\" } Tip If you want to edit the source code, you should add develop = true pyproject.toml [tool.poetry.dependencies] my-package = { path = \"../my/path\" , develop = true }","title":"About vendor dependencies"},{"location":"reference/vendor/#1-folder-for-your-dependencies","text":"It cannot be placed in .venv anymore. All dependencies' source code usually place in vendor folder, so, firstly, you need to create it","title":"1) Folder for your dependencies"},{"location":"reference/vendor/#2-add-git-submodule","text":"Terminal git add submodule { repository url } vendor/ { repo name } Submodule is correctly handled by Git when you do commit. It is recognized as another repository, not just an ordinary folder. It is still a Git repository that can be pulled, for example. Hint Recommend you add such dependencies from your own fork of the original repository","title":"2) Add git submodule"},{"location":"reference/vendor/#3-add-it-with-poetry","text":"Terminal poetry add vendor/ { name } or another way as described in how to add a dependency And you see something like this pyproject.toml [tool.poetry.dependencies] my-package = { path = \"../my/path\" } Tip If you want to edit the source code, you should add develop = true pyproject.toml [tool.poetry.dependencies] my-package = { path = \"../my/path\" , develop = true }","title":"3) Add it with poetry"},{"location":"user-guide/","text":"This user is a step-by-step guide of how to deploy your first library that summarize and subtract numbers. The guide does not require you to know a lot about Python and CI/CD circle, but it supposes you have basic understanding of Git and how to install libraries with pip, so you want to create a such own. Everything will be described as full as possible. Hint You can find some questions answers about coverage of a little more advanced cases in Reference section Let's go!","title":"Introduction"},{"location":"user-guide/environments/","text":"Hint If you are familiar with venv , you can skip it By a default behavior you have only one Python in your \"Terminal\" and only the one place where all your dependencies are stored. It's okay for local scripting, but when you develop everything in one scope , there is can be a requirement: every project should have their own python version and own dependencies . Otherwise, it can cause dependencies' version conflict Note Any the environment's dependencies CLI scripts, for example, pytest , will be installed only inside the environment and does not available outside. So running \"rules\" for the script are the same as for python and described below Dependencies isolation between your project can be done with virtualenv that is a built-in library in Python now Executing this Terminal python -m venv .venv means creating a new environment with .venv folder. You can see a such folder in your project You can access to this environment by 3 ways: Full path Just pass in terminal full pass to python executable: .venv/bin/python . It's a full copy of your python but with isolated dependencies. .venv/bin/pip works too (backslashes for Windows) Activate environment You can activate the environment and python executable will be accessible with python3 by this command: Linux/MacOS Windows Terminal .venv/bin/activate Terminal .venv \\S cripts \\a ctivate.bat And a prefix .venv will be added to your command line prompt To disable environment run this Linux/MacOS Windows Terminal deactivate Terminal .venv \\S cripts \\d eactivate.bat Via Poetry If your Poetry configured for local environments (as in this template), you can run Terminal poetry run python and it will be executed in the environment","title":"About environments and virtaulenv"},{"location":"user-guide/environments/#full-path","text":"Just pass in terminal full pass to python executable: .venv/bin/python . It's a full copy of your python but with isolated dependencies. .venv/bin/pip works too (backslashes for Windows)","title":"Full path"},{"location":"user-guide/environments/#activate-environment","text":"You can activate the environment and python executable will be accessible with python3 by this command: Linux/MacOS Windows Terminal .venv/bin/activate Terminal .venv \\S cripts \\a ctivate.bat And a prefix .venv will be added to your command line prompt To disable environment run this Linux/MacOS Windows Terminal deactivate Terminal .venv \\S cripts \\d eactivate.bat","title":"Activate environment"},{"location":"user-guide/environments/#via-poetry","text":"If your Poetry configured for local environments (as in this template), you can run Terminal poetry run python and it will be executed in the environment","title":"Via Poetry"},{"location":"user-guide/first-init/","text":"1) Come up with library name Firstly, you need think about library name. Keep in mind that your name should be unique and does not exist yet. We will call it sumsub but you should think about your own. You can check that your name is still free on PyPI search panel. Note Try avoiding such parts in library name such as lib or py . Anyone who will see or use import < your - name > already knows that it is a library for python. Name should be short and sensed. Also by PEP8 library name should not contain underscores ( _ ) 2) Install cookiecutter Secondly, make sure you have installed the latest version of cookiecutter python -m pip install --upgrade cookiecutter Faq cookiecutter is project templating tool allows creating \"copies\" by a template files structure and template strings inside the project so for best experience we allow you configured some parameters like project name, description, etc. It easily can be done with cookiecutter Now you are ready to create your own library! Remind you in this tutorial we are going to create a library that summarize and subtract numbers. 3) Create a remote repository Your library code will be hosted on a remote repository (GitHub preferred). So now we should create it 4) Create a project by the template This command will create a directory with your library code. Execute this in a directory you want the project will exist Required tools: Git Make Make sure you have them installed and added in your PATH Terminal cookiecutter gh:deknowny/python-package-template -o . Missing If you get an error like command cookiecutter cannot be found try executing python -m cookiecutter gh:deknowny/python-package-template -o . You will be asked some prompts Question If you see a prompt like Is it okay to delete and re-download it? press Enter project_name : Provide project name here (we will set it to Sum Sub Library ) project_slug : Press Enter if it's okay. It will be used as PyPI package name so make sure it's unique! (we will use sumsub ) project_description : Provide project description. (we will set it to My first library for addition and subtraction numbers! ) author_name : Provide you full name here author_email : Provide your valid email development_python_version : As you prefer (we will use 3.9 ) min_supported_version : We just add functions for summarize and subtract numbers. 3.6 will be okay github_project_name : Provide GitHub project name. It concatenated with your GitHub username and repository name. If your username is janedoe and library name is mylib enter janedoe/mylib here github_main_branch : Recommend to use main , but if you have an old version of Git and master is often used by you, keep it for your convenience docs_uri : Enter . We will use GitHub pages for deploy We will discuss every field more deeply later when the field has straight influence on what we are doing at the moment Next few sections will introduce you to some features","title":"First init"},{"location":"user-guide/first-init/#1-come-up-with-library-name","text":"Firstly, you need think about library name. Keep in mind that your name should be unique and does not exist yet. We will call it sumsub but you should think about your own. You can check that your name is still free on PyPI search panel. Note Try avoiding such parts in library name such as lib or py . Anyone who will see or use import < your - name > already knows that it is a library for python. Name should be short and sensed. Also by PEP8 library name should not contain underscores ( _ )","title":"1) Come up with library name"},{"location":"user-guide/first-init/#2-install-cookiecutter","text":"Secondly, make sure you have installed the latest version of cookiecutter python -m pip install --upgrade cookiecutter Faq cookiecutter is project templating tool allows creating \"copies\" by a template files structure and template strings inside the project so for best experience we allow you configured some parameters like project name, description, etc. It easily can be done with cookiecutter Now you are ready to create your own library! Remind you in this tutorial we are going to create a library that summarize and subtract numbers.","title":"2) Install cookiecutter"},{"location":"user-guide/first-init/#3-create-a-remote-repository","text":"Your library code will be hosted on a remote repository (GitHub preferred). So now we should create it","title":"3) Create a remote repository"},{"location":"user-guide/first-init/#4-create-a-project-by-the-template","text":"This command will create a directory with your library code. Execute this in a directory you want the project will exist Required tools: Git Make Make sure you have them installed and added in your PATH Terminal cookiecutter gh:deknowny/python-package-template -o . Missing If you get an error like command cookiecutter cannot be found try executing python -m cookiecutter gh:deknowny/python-package-template -o . You will be asked some prompts Question If you see a prompt like Is it okay to delete and re-download it? press Enter project_name : Provide project name here (we will set it to Sum Sub Library ) project_slug : Press Enter if it's okay. It will be used as PyPI package name so make sure it's unique! (we will use sumsub ) project_description : Provide project description. (we will set it to My first library for addition and subtraction numbers! ) author_name : Provide you full name here author_email : Provide your valid email development_python_version : As you prefer (we will use 3.9 ) min_supported_version : We just add functions for summarize and subtract numbers. 3.6 will be okay github_project_name : Provide GitHub project name. It concatenated with your GitHub username and repository name. If your username is janedoe and library name is mylib enter janedoe/mylib here github_main_branch : Recommend to use main , but if you have an old version of Git and master is often used by you, keep it for your convenience docs_uri : Enter . We will use GitHub pages for deploy We will discuss every field more deeply later when the field has straight influence on what we are doing at the moment Next few sections will introduce you to some features","title":"4) Create a project by the template"},{"location":"user-guide/makefile/","text":"Hint If you are familiar with make , you can skip it We are ready for developing but before let's talk a little about make and Makefile . make the first purpose is simplify build code of C-family languages because commands developers use with compiler quite long and can contain some boilerplate parts. But actually make can be viewed as commands shortcuts tool for Python too. Perhaps you see scripts/ folder in different open source projects, and Makefile is a pretty replacement for this. It's easier to customize python & poetry version and easier to read & edit scripts code with it. It's like an npm run or yarn run logic. For example, instead of running this all the time (it makes your code prettier i.e. remove excess indentations, sorting imports...): Terminal python -m poetry run black {{ cookiecutter.project_slug }} && \\ git add -u && \\ python -m poetry run isort {{ cookiecutter.project_slug }} && \\ git add -u && \\ python -m poetry run autoflake \\ --ignore-init-module-imports \\ --remove-unused-variables \\ --recursive \\ --in-place {{ cookiecutter.project_slug }} tests You can just run this: Terminal make format So the template contains many useful shortcuts in Makefile . They are full commented, so you can just read everything about them from source code of the Makefile or just in Makefile generated in your project. They all are discussed at the corresponding sections.","title":"About Makefile"},{"location":"user-guide/poetry/","text":"Hint If you are familiar with poetry , you can skip it When you are writing a library you need: Dependencies manager (if your project depends on another libraries) Project builder Tool that publishes the project to PyPI A tool that allows isolating dependencies between projects And a common solution is: pip setuptools twine venv And it's quite easy solution (but actually it wasn't so clear for me few years ago \ud83d\ude05) Poetry Sounds amazing but in fact Poetry is a replacement for all these 4 tools, and it gets it easier and more user-friendly. It's like a npm or cargo So this template uses Poetry for dependency manager, project build, publishing tool and dependencies isolating Read more about dependencies managing at Manage dependencies","title":"About Poetry"},{"location":"user-guide/poetry/#poetry","text":"Sounds amazing but in fact Poetry is a replacement for all these 4 tools, and it gets it easier and more user-friendly. It's like a npm or cargo So this template uses Poetry for dependency manager, project build, publishing tool and dependencies isolating Read more about dependencies managing at Manage dependencies","title":"Poetry"}]}